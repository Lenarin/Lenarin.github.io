{"version":3,"sources":["webpack:///./src/pages/test/test.html.js"],"names":["testArr","text","variants","answer","Test","data","val","location","useState","map","el","answers","setAnswers","submited","setSubmited","css","marginTop","marginBottom","filter","idx","length","varIdx","display","flexDirection","type","name","value","checked","onChange","prev","slice","marginRight","id","for","backgroundColor","colors","brand","color","black","padding","whiteSpace","transition","border","media","greaterThan","paddingTop","paddingBottom","white","onClick"],"mappings":"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","file":"component---src-pages-test-test-html-js-a69e65ec8fba51b4f0d4.js","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * @emails react-core\r\n */\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport Layout from 'components/Layout';\r\nimport Container from 'components/Container';\r\nimport {colors, media} from 'theme';\r\n\r\nconst testArr = [\r\n  {\r\n    text: 'Что такое React?',\r\n    variants: [\r\n      'Реактивная библиотека рендера',\r\n      'Набор компонент для сайта',\r\n      'Рисовальщик для графиков',\r\n    ],\r\n    answer: 0\r\n  },\r\n  {\r\n    text: 'Что такое JSX?',\r\n    variants: [\r\n      'Строковые шаблоны',\r\n      'Синтаксический сахар, расширение языка JavaScript для более удобной работы с React',\r\n      'Другое имя для HTML тегов',\r\n    ],\r\n    answer: 1\r\n  },\r\n  {\r\n    text: 'Как правильно вызвать событие по клику на элемент?',\r\n    variants: [\r\n      'Использовать addEventListener',\r\n      'Перехватить event выше по дереву',\r\n      'Добавить обработчик события onClick',\r\n    ],\r\n    answer: 2\r\n  },\r\n  {\r\n    text: 'Как получить данные из текстового поля?',\r\n    variants: [\r\n      'Вытащить из HTML тега из поля text',\r\n      'Обернуть в state поля value и onChange',\r\n      'Передать state в поле value',\r\n    ],\r\n    answer: 1\r\n  },\r\n  {\r\n    text: 'Что такое пропы?',\r\n    variants: [\r\n      'Параметры, передающиеся на сервер с запросом',\r\n      'Состояние компоненты',\r\n      'Параметры, передающиеся как входные данные в компоненту',\r\n    ],\r\n    answer: 2,\r\n  },\r\n  {\r\n    text: 'Какой хук позвояляет управлять состоянием копоненты?',\r\n    variants: [\r\n      'useState',\r\n      'useEffect',\r\n      'UseMemo',\r\n    ],\r\n    answer: 0,\r\n  },\r\n  {\r\n    text: 'Какой хук позволяет подписываться на ивенты жизненного цикла компоненты?',\r\n    variants: [\r\n      'useState',\r\n      'useEffect',\r\n      'UseMemo',\r\n    ],\r\n    answer: 1,\r\n  },\r\n  {\r\n    text: 'Какой хук позволяет управлять в каких случаях стоит перерисовывать компоненту',\r\n    variants: [\r\n      'useState',\r\n      'useEffect',\r\n      'UseMemo',\r\n    ],\r\n    answer: 2,\r\n  },\r\n  {\r\n    text: 'Что такое условный рендеринг?',\r\n    variants: [\r\n      'Рендер одной или иной компоненты в зависимости от пропсов или состояния',\r\n      'Разные методы рендера браузера, в завилисости от параметров',\r\n      'Рендеринг условий',\r\n    ],\r\n    answer: 0,\r\n  },\r\n  {\r\n    text: 'Для чего нужен key в элементах массива?',\r\n    variants: [\r\n      'Без него просто не заработает',\r\n      'Для красоты',\r\n      'Чтобы подсказать React какая компонента какая при следующем ререндере',\r\n    ],\r\n    answer: 2,\r\n  },\r\n  {\r\n    text: 'Что будет если ключи в масисве будет не уникальны?',\r\n    variants: [\r\n      'Непределенное поведение',\r\n      'Приложение закроется с ошибкой',\r\n      'Все будет работать',\r\n    ],\r\n    answer: 0,\r\n  },\r\n  {\r\n    text: 'Что такое подъем состояния?',\r\n    variants: [\r\n      'Это увеличение значения в состоянии компоненты',\r\n      'Это техника, при которой состояние поднимается вверх по дереву для использования в соседних компонентых',\r\n      'Это другое название хука useState',\r\n    ],\r\n    answer: 1,\r\n  },\r\n  {\r\n    text: 'Какие из указанных событий являтся событиями клавиатуры?',\r\n    variants: [\r\n      'onKeyDown onKeyPress onKeyUp',\r\n      'onChange onInput onInvalid onReset onSubmit',\r\n      'onClick onContextMenu onDoubleClick',\r\n    ],\r\n    answer: 0,\r\n  },\r\n  {\r\n    text: 'Какие из указанных событий являтся событиями мыши?',\r\n    variants: [\r\n      'onKeyDown onKeyPress onKeyUp',\r\n      'onChange onInput onInvalid onReset onSubmit',\r\n      'onClick onContextMenu onDoubleClick',\r\n    ],\r\n    answer: 2,\r\n  },\r\n  {\r\n    text: 'Какие из указанных событий являтся событиями форм?',\r\n    variants: [\r\n      'onKeyDown onKeyPress onKeyUp',\r\n      'onChange onInput onInvalid onReset onSubmit',\r\n      'onClick onContextMenu onDoubleClick',\r\n    ],\r\n    answer: 1,\r\n  },\r\n  {\r\n    text: 'Какой из указанных хуков позволяет мемоизировать колбек?',\r\n    variants: [\r\n      'useCallback',\r\n      'useMemo',\r\n      'UseEffect',\r\n    ],\r\n    answer: 0,\r\n  },\r\n  {\r\n    text: 'Какой из указанных хуков позволяет мемоизировать сложное вычисление?',\r\n    variants: [\r\n      'useCallback',\r\n      'useMemo',\r\n      'useComputed',\r\n    ],\r\n    answer: 2,\r\n  },\r\n  {\r\n    text: 'Какой из указанных хуков позволяет создать референс на компоненту?',\r\n    variants: [\r\n      'useCallback',\r\n      'useRef',\r\n      'useComputed',\r\n    ],\r\n    answer: 1,\r\n  },\r\n  {\r\n    text: 'Какой из указанных хуков позволяет подписаться на изменения в компоненте до ее отрисовки?',\r\n    variants: [\r\n      'useLayoutEffect',\r\n      'useRef',\r\n      'useComputed',\r\n    ],\r\n    answer: 0,\r\n  },\r\n  {\r\n    text: 'Что такое CircuitBraker',\r\n    variants: [\r\n      'Специальная компонента для отлова ошибок и рендера загрулек',\r\n      'Электронная схема для разрыва электронной цепи',\r\n      'Рок группа',\r\n    ],\r\n    answer: 0,\r\n  },\r\n]\r\n\r\nconst getResultName = (val) => {\r\n    if (val <= 10) {return \"Неудовлетворительно\";}\r\n    if (val <= 14) {return \"Удовлетворительно\";}\r\n    if (val <= 18) {return \"Хорошо\";}\r\n    return \"Отлично\"\r\n}\r\n \r\nconst Test = ({data, location}) => {\r\n  const [answers, setAnswers] = useState(testArr.map((el) => 0));\r\n  const [submited, setSubmited] = useState(false);\r\n\r\n  return (\r\n    <Layout location={location}>\r\n      {submited ? \r\n        <Container>\r\n            <h2 css={{marginTop: 10, marginBottom: 15}}>Вы правильно ответили на {testArr.filter((el, idx) => answers[idx] === el.answer).length} из {testArr.length} вопросов</h2>\r\n            <h2>Ваша оценка: {getResultName(testArr.filter((el, idx) => answers[idx] === el.answer).length)} </h2>\r\n        </Container> : \r\n        \r\n        <Container>\r\n          <h2 css={{marginTop: 10, marginBottom: 15}}>Данный тест призван проверить ваши теоретические знания материала</h2>\r\n          {testArr.map(({text, variants}, idx) => \r\n            <div css={{marginBottom: 10}}>\r\n              <h3 css={{marginBottom: 5}}>{idx + 1}. {text}</h3>\r\n              {variants.map((val, varIdx) => \r\n                <div css={{display: 'flex', flexDirection: 'row'}}>\r\n                  <input \r\n                    type=\"radio\" \r\n                    name={idx} \r\n                    value={varIdx} \r\n                    checked={varIdx === answers[idx]}\r\n                    onChange={() => setAnswers((prev) => [...prev.slice(0, idx), varIdx, ...prev.slice(idx + 1)])}  \r\n                    css={{marginRight: 5}}\r\n                    id={`${idx}-${varIdx}`}\r\n                  />\r\n                  <label for={`${idx}-${varIdx}`}>{val}</label>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n          <button css={{\r\n            backgroundColor: colors.brand,\r\n            color: colors.black,\r\n            padding: '10px 25px',\r\n            whiteSpace: 'nowrap',\r\n            transition: 'background-color 0.2s ease-out',\r\n            border: 0,\r\n            marginBottom: 30,\r\n\r\n            [media.greaterThan('xlarge')]: {\r\n              paddingTop: 15,\r\n              paddingBottom: 15,\r\n            },\r\n\r\n            ':hover': {\r\n              backgroundColor: colors.white,\r\n            },\r\n          }}\r\n            onClick={() => setSubmited(true)}\r\n          >\r\n            Проверить\r\n        </button>\r\n        </Container>\r\n      }\r\n      \r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Test;\r\n "],"sourceRoot":""}