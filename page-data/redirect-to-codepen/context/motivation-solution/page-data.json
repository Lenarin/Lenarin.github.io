{"componentChunkName":"component---src-templates-codepen-example-js","path":"/redirect-to-codepen/context/motivation-solution","result":{"pageContext":{"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"// highlight-range{1-5}\\n// Контекст позволяет передавать значение глубоко\\n// в дерево компонентов без явной передачи пропсов\\n// на каждом уровне. Создадим контекст для текущей\\n// UI-темы (со значением \\\"light\\\" по умолчанию).\\nconst ThemeContext = React.createContext('light');\\n\\nclass App extends React.Component {\\n  render() {\\n    // highlight-range{1-4,6}\\n    // Компонент Provider используется для передачи текущей\\n    // UI-темы вниз по дереву. Любой компонент может использовать\\n    // этот контекст и не важно, как глубоко он находится.\\n    // В этом примере мы передаём \\\"dark\\\" в качестве значения контекста.\\n    return (\\n      <ThemeContext.Provider value=\\\"dark\\\">\\n        <Toolbar />\\n      </ThemeContext.Provider>\\n    );\\n  }\\n}\\n\\n// highlight-range{1,2}\\n// Компонент, который находится в середине,\\n// больше не должен явно передавать тему вниз.\\nfunction Toolbar() {\\n  return (\\n    <div>\\n      <ThemedButton />\\n    </div>\\n  );\\n}\\n\\nclass ThemedButton extends React.Component {\\n  // highlight-range{1-4,7}\\n  // Определяем contextType, чтобы получить значение контекста.\\n  // React найдёт (выше по дереву) ближайший Provider-компонент,\\n  // предоставляющий этот контекст, и использует его значение.\\n  // В этом примере значение UI-темы будет \\\"dark\\\".\\n  static contextType = ThemeContext;\\n  render() {\\n    return <Button theme={this.context} />;\\n  }\\n}\\n\",\"js_external\":\"//unpkg.com/react/umd/react.development.js;//unpkg.com/react-dom/umd/react-dom.development.js\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}},"staticQueryHashes":[]}