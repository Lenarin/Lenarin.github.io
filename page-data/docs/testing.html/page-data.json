{"componentChunkName":"component---src-templates-docs-js","path":"/docs/testing.html","result":{"data":{"markdownRemark":{"html":"<p>Тестирование React-компонентов аналогично тестированию любого другого JavaScript-кода.</p>\n<p>Есть несколько способов тестирования React-компонентов. В целом, можно выделить два основных:</p>\n<ul>\n<li><strong>Рендеринг деревьев компонентов</strong> в упрощенной тестовой среде и проверка их предполагаемого вывода.</li>\n<li><strong>Запуск всего приложения</strong> в реалистичной среде браузера (так называемые «сквозные» тесты).</li>\n</ul>\n<p>Этот раздел документации посвящён стратегиям тестирования первым способом. Несмотря на то, что «сквозные» тесты могут быть очень полезны для предотвращения регрессии в важных потоках приложения, эти тесты не касаются React-компонентов напрямую и выходят за рамки этого раздела.</p>\n<h3 id=\"tradeoffs\"><a href=\"#tradeoffs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Компромиссы </h3>\n<p>Выбирая инструменты тестирования, стоит рассмотреть несколько компромиссов:</p>\n<ul>\n<li><strong>Скорость итераций против реалистичной среды:</strong> Одни инструменты позволяют получить быстрый цикл «внёс изменения — увидел результат», но не моделируют поведение браузера в точности. Другие инструменты могут использовать реальную среду браузера, но снижают скорость итераций и могут вызывать проблемы при непрерывной интеграции.</li>\n<li><strong>Как много фиктивных объектов использовать:</strong> При работе с компонентами границы между «модульным» и «интеграционным» тестом выглядят размытыми. Тестируя форму, нужно ли тестировать кнопки внутри неё? Или компонент «кнопка» должен иметь свои собственные тесты? Должны ли изменения в коде кнопки ломать тест формы?</li>\n</ul>\n<p>Одни варианты ответов подойдут одним командам и продуктам, другие другим.</p>\n<h3 id=\"tools\"><a href=\"#tools\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Рекомендуемые инструменты </h3>\n<p><strong><a href=\"https://facebook.github.io/jest/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jest</a></strong> — исполнитель тестов на JavaScript, который позволяет взаимодействовать с DOM через <a href=\"/docs/testing-environments.html#mocking-a-rendering-surface\"><code class=\"gatsby-code-text\">jsdom</code></a>. Несмотря на то, что jsdom только приблизительно реализует работу браузера, в большинстве случаев этого достаточно для тестирования React-компонентов. Jest предлагает отличную скорость итераций вместе с мощными возможностями, например фиктивные <a href=\"/docs/testing-environments.html#mocking-modules\">модули</a> и <a href=\"/docs/testing-environments.html#mocking-timers\">таймеры</a>, которые дают больше контроля над исполнением кода.</p>\n<p><strong><a href=\"https://testing-library.com/react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Testing Library</a></strong> — это набор вспомогательных функций, позволяющий тестировать React-компоненты не полагаясь на их внутреннюю реализацию. Такой подход упрощает рефакторинг, а также подталкивает вас применять лучшие практики по улучшению доступности. Несмотря на то, что библиотека не позволяет делать «поверхностный» рендер компонента без дочерних компонентов, исполнители тестов, например, Jest позволяет это сделать через фиктивные <a href=\"/docs/testing-recipes.html#mocking-modules\">модули</a>.</p>\n<h3 id=\"learn-more\"><a href=\"#learn-more\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Двигаемся дальше </h3>\n<p>Этот раздел состоит из двух страниц:</p>\n<ul>\n<li><a href=\"/docs/testing-recipes.html\">Рецепты</a>: Общие принципы написания тестов React-компонентов.</li>\n<li><a href=\"/docs/testing-environments.html\">Среды</a>: Что следует учитывать при настройке среды тестирования React-компонентов.</li>\n</ul>","frontmatter":{"title":"Основы тестирования","next":"testing-recipes.html","prev":null},"fields":{"path":"content\\docs\\testing.md","slug":"docs/testing.html"}}},"pageContext":{"slug":"docs/testing.html"}},"staticQueryHashes":[]}