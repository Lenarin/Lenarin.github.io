{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"codeExamples":{"edges":[{"node":{"id":"a-component-using-external-plugins","code":"class MarkdownEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.md = new Remarkable();\n    this.handleChange = this.handleChange.bind(this);\n    this.state = { value: 'Привет, **мир**!' };\n  }\n\n  handleChange(e) {\n    this.setState({ value: e.target.value });\n  }\n\n  getRawMarkup() {\n    return { __html: this.md.render(this.state.value) };\n  }\n\n  render() {\n    return (\n      <div className=\"MarkdownEditor\">\n        <h3>Редактор</h3>\n        <label htmlFor=\"markdown-content\">\n          Введите что-нибудь\n        </label>\n        <textarea\n          id=\"markdown-content\"\n          onChange={this.handleChange}\n          defaultValue={this.state.value}\n        />\n        <h3>Вывод</h3>\n        <div\n          className=\"content\"\n          dangerouslySetInnerHTML={this.getRawMarkup()}\n        />\n      </div>\n    );\n  }\n}\n\nroot.render(<MarkdownEditor />);\n","mdAbsolutePath":"E:/Downloads/AAAAA/ru.reactjs.org-main/ru.reactjs.org-main/content/home/examples/a-component-using-external-plugins.md"}},{"node":{"id":"a-simple-component","code":"class HelloMessage extends React.Component {\n  render() {\n    return (\n      <div>\n        Привет, {this.props.name}\n      </div>\n    );\n  }\n}\n\nroot.render(<HelloMessage name=\"Саша\" />);\n","mdAbsolutePath":"E:/Downloads/AAAAA/ru.reactjs.org-main/ru.reactjs.org-main/content/home/examples/a-simple-component.md"}},{"node":{"id":"a-stateful-component","code":"class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { seconds: 0 };\n  }\n\n  tick() {\n    this.setState(state => ({\n      seconds: state.seconds + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div>\n        Секунды: {this.state.seconds}\n      </div>\n    );\n  }\n}\n\nroot.render(<Timer />);\n","mdAbsolutePath":"E:/Downloads/AAAAA/ru.reactjs.org-main/ru.reactjs.org-main/content/home/examples/a-stateful-component.md"}},{"node":{"id":"an-application","code":"class TodoApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { items: [], text: '' };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Список дел</h3>\n        <TodoList items={this.state.items} />\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"new-todo\">\n            Что нужно сделать?\n          </label>\n          <input\n            id=\"new-todo\"\n            onChange={this.handleChange}\n            value={this.state.text}\n          />\n          <button>\n            Добавить #{this.state.items.length + 1}\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n  handleChange(e) {\n    this.setState({ text: e.target.value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (this.state.text.length === 0) {\n      return;\n    }\n    const newItem = {\n      text: this.state.text,\n      id: Date.now()\n    };\n    this.setState(state => ({\n      items: state.items.concat(newItem),\n      text: ''\n    }));\n  }\n}\n\nclass TodoList extends React.Component {\n  render() {\n    return (\n      <ul>\n        {this.props.items.map(item => (\n          <li key={item.id}>{item.text}</li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nroot.render(<TodoApp />);\n","mdAbsolutePath":"E:/Downloads/AAAAA/ru.reactjs.org-main/ru.reactjs.org-main/content/home/examples/an-application.md"}}]},"examples":{"edges":[{"node":{"fileAbsolutePath":"E:/Downloads/AAAAA/ru.reactjs.org-main/ru.reactjs.org-main/content/home/examples/a-simple-component.md","fields":{"slug":"/home/examples/a-simple-component.html"},"frontmatter":{"title":"Простой компонент","domid":"hello-example"},"html":"<p>React-компоненты реализуют метод <code class=\"gatsby-code-text\">render()</code>, который принимает входные данные и возвращает что-то для вывода. В этом примере используется XML-подобный синтаксис под названием JSX. Входные данные, передаваемые в компонент, доступны в <code class=\"gatsby-code-text\">render()</code> через <code class=\"gatsby-code-text\">this.props</code>.</p>\n<p><strong>JSX необязателен для работы с React.</strong> Попробуйте <a href=\"https://babeljs.io/repl/#?presets=react&code_lz=MYewdgzgLgBApgGzgWzmWBeGAeAFgRgD4AJRBEAGhgHcQAnBAEwEJsB6AwgbgChRJY_KAEMAlmDh0YWRiGABXVOgB0AczhQAokiVQAQgE8AkowAUAcjogQUcwEpeAJTjDgUACIB5ALLK6aRklTRBQ0KCohMQk6Bx4gA\" target=\"_blank\" rel=\"noreferrer\">Babel REPL</a>, чтобы увидеть JavaScript-код, полученный на этапе компиляции JSX.</p>"}},{"node":{"fileAbsolutePath":"E:/Downloads/AAAAA/ru.reactjs.org-main/ru.reactjs.org-main/content/home/examples/a-stateful-component.md","fields":{"slug":"/home/examples/a-stateful-component.html"},"frontmatter":{"title":"Компонент с состоянием","domid":"timer-example"},"html":"<p>Помимо входных данных (доступных через <code class=\"gatsby-code-text\">this.props</code>), компонент поддерживает внутренние данные состояния (доступные через <code class=\"gatsby-code-text\">this.state</code>). Когда данные состояния компонента изменятся, React ещё раз вызовет <code class=\"gatsby-code-text\">render()</code> и обновит отрендеренную разметку.</p>"}},{"node":{"fileAbsolutePath":"E:/Downloads/AAAAA/ru.reactjs.org-main/ru.reactjs.org-main/content/home/examples/an-application.md","fields":{"slug":"/home/examples/an-application.html"},"frontmatter":{"title":"Приложение","domid":"todos-example"},"html":"<p>Используя <code class=\"gatsby-code-text\">props</code> и <code class=\"gatsby-code-text\">state</code>, можно создать небольшое приложение списка дел. В этом примере используется <code class=\"gatsby-code-text\">state</code> для отслеживания текущего списка элементов, а также текста, введённого пользователем. Хотя обработчики событий встроены в разметку, они собираются и реализуются с помощью делегирования событий.</p>"}},{"node":{"fileAbsolutePath":"E:/Downloads/AAAAA/ru.reactjs.org-main/ru.reactjs.org-main/content/home/examples/a-component-using-external-plugins.md","fields":{"slug":"/home/examples/a-component-using-external-plugins.html"},"frontmatter":{"title":"Компонент с использованием внешних плагинов","domid":"markdown-example"},"html":"<p>React позволяет работать с другими библиотеками и фреймворками. В этом примере используется внешняя библиотека <strong>remarkable</strong>, чтобы в режиме реального времени преобразовать Markdown-синтаксис, введённый в элемент <code class=\"gatsby-code-text\">&lt;textarea></code>.</p>"}}]},"marketing":{"edges":[{"node":{"frontmatter":{"title":"ЭУМК React"},"html":"<p>Целью изучения данного курса является получение базовых теоретических и практических навыков в фреймворке языка программирования JavaScript — React.</p>\n<p>Задачи учебного курса:</p>\n<ul>\n<li>изучить фреймворк React, его синтаксис;</li>\n<li>научиться разворачивать веб-приложение, написанное на React;</li>\n<li>понять устройство фреймворка изнутри для написания собственных программных интерфейсов;</li>\n<li>на основе примеров изучить, как создавать различные элементы веб-страниц — от базовых компонентов до форм и целых страниц.</li>\n</ul>\n<p>По завершении курса Вы приобретёте навыки:</p>\n<ul>\n<li>разворачивая проектов на Vue;</li>\n<li>разработки собсвенных веб-приложений и страниц;</li>\n<li>углублённого понимания устройства языка и его компонентов;</li>\n<li>обработки потока данных на странице;</li>\n<li>сможете применять полученные знания на практике.</li>\n</ul>\n<p>На данный момент курс содержит два основных раздела:</p>\n<ul>\n<li>Введение в React — от введения до основ компонентов. На раздел выделяется 8 академических часов;</li>\n<li>Детальная документация с описанием всех основных возможностей. На раздел выделяется 24 академических часов.</li>\n</ul>"}}]}},"pageContext":{}},"staticQueryHashes":[]}